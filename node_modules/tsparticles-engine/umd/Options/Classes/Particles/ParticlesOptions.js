var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../AnimatableColor", "./Collisions/Collisions", "./Destroy/Destroy", "./Move/Move", "./Opacity/Opacity", "./Bounce/ParticlesBounce", "./Number/ParticlesNumber", "./Rotate/Rotate", "./Shadow", "./Shape/Shape", "./Size/Size", "./Stroke", "./ZIndex/ZIndex", "../../../Utils/Utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    var _ParticlesOptions_container, _ParticlesOptions_engine;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParticlesOptions = void 0;
    const AnimatableColor_1 = require("../AnimatableColor");
    const Collisions_1 = require("./Collisions/Collisions");
    const Destroy_1 = require("./Destroy/Destroy");
    const Move_1 = require("./Move/Move");
    const Opacity_1 = require("./Opacity/Opacity");
    const ParticlesBounce_1 = require("./Bounce/ParticlesBounce");
    const ParticlesNumber_1 = require("./Number/ParticlesNumber");
    const Rotate_1 = require("./Rotate/Rotate");
    const Shadow_1 = require("./Shadow");
    const Shape_1 = require("./Shape/Shape");
    const Size_1 = require("./Size/Size");
    const Stroke_1 = require("./Stroke");
    const ZIndex_1 = require("./ZIndex/ZIndex");
    const Utils_1 = require("../../../Utils/Utils");
    class ParticlesOptions {
        constructor(engine, container) {
            _ParticlesOptions_container.set(this, void 0);
            _ParticlesOptions_engine.set(this, void 0);
            __classPrivateFieldSet(this, _ParticlesOptions_engine, engine, "f");
            __classPrivateFieldSet(this, _ParticlesOptions_container, container, "f");
            this.bounce = new ParticlesBounce_1.ParticlesBounce();
            this.collisions = new Collisions_1.Collisions();
            this.color = new AnimatableColor_1.AnimatableColor();
            this.color.value = "#fff";
            this.destroy = new Destroy_1.Destroy();
            this.groups = {};
            this.move = new Move_1.Move();
            this.number = new ParticlesNumber_1.ParticlesNumber();
            this.opacity = new Opacity_1.Opacity();
            this.reduceDuplicates = false;
            this.rotate = new Rotate_1.Rotate();
            this.shadow = new Shadow_1.Shadow();
            this.shape = new Shape_1.Shape();
            this.size = new Size_1.Size();
            this.stroke = new Stroke_1.Stroke();
            this.zIndex = new ZIndex_1.ZIndex();
        }
        load(data) {
            var _a, _b, _c, _d, _e, _f;
            if (!data) {
                return;
            }
            this.bounce.load(data.bounce);
            this.color.load(AnimatableColor_1.AnimatableColor.create(this.color, data.color));
            this.destroy.load(data.destroy);
            if (data.groups !== undefined) {
                for (const group in data.groups) {
                    const item = data.groups[group];
                    if (item !== undefined) {
                        this.groups[group] = (0, Utils_1.deepExtend)((_a = this.groups[group]) !== null && _a !== void 0 ? _a : {}, item);
                    }
                }
            }
            this.move.load(data.move);
            this.number.load(data.number);
            this.opacity.load(data.opacity);
            if (data.reduceDuplicates !== undefined) {
                this.reduceDuplicates = data.reduceDuplicates;
            }
            this.rotate.load(data.rotate);
            this.shape.load(data.shape);
            this.size.load(data.size);
            this.shadow.load(data.shadow);
            this.zIndex.load(data.zIndex);
            const collisions = (_c = (_b = data.move) === null || _b === void 0 ? void 0 : _b.collisions) !== null && _c !== void 0 ? _c : (_d = data.move) === null || _d === void 0 ? void 0 : _d.bounce;
            if (collisions !== undefined) {
                this.collisions.enable = collisions;
            }
            this.collisions.load(data.collisions);
            if (data.interactivity !== undefined) {
                this.interactivity = (0, Utils_1.deepExtend)({}, data.interactivity);
            }
            const strokeToLoad = (_e = data.stroke) !== null && _e !== void 0 ? _e : (_f = data.shape) === null || _f === void 0 ? void 0 : _f.stroke;
            if (strokeToLoad) {
                if (strokeToLoad instanceof Array) {
                    this.stroke = strokeToLoad.map((s) => {
                        const tmp = new Stroke_1.Stroke();
                        tmp.load(s);
                        return tmp;
                    });
                }
                else {
                    if (this.stroke instanceof Array) {
                        this.stroke = new Stroke_1.Stroke();
                    }
                    this.stroke.load(strokeToLoad);
                }
            }
            if (__classPrivateFieldGet(this, _ParticlesOptions_container, "f")) {
                const updaters = __classPrivateFieldGet(this, _ParticlesOptions_engine, "f").plugins.updaters.get(__classPrivateFieldGet(this, _ParticlesOptions_container, "f"));
                if (updaters) {
                    for (const updater of updaters) {
                        if (updater.loadOptions) {
                            updater.loadOptions(this, data);
                        }
                    }
                }
                const interactors = __classPrivateFieldGet(this, _ParticlesOptions_engine, "f").plugins.interactors.get(__classPrivateFieldGet(this, _ParticlesOptions_container, "f"));
                if (interactors) {
                    for (const interactor of interactors) {
                        if (interactor.loadParticlesOptions) {
                            interactor.loadParticlesOptions(this, data);
                        }
                    }
                }
            }
        }
    }
    exports.ParticlesOptions = ParticlesOptions;
    _ParticlesOptions_container = new WeakMap(), _ParticlesOptions_engine = new WeakMap();
});
