{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particles_engine;\n\nimport { calcPositionFromSize, getRandom, getRangeMax, getRangeMin, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nexport class Particles {\n  constructor(engine, container) {\n    this.container = container;\n\n    _Particles_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n    this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  addManualParticles() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      this.addParticle(calcPositionFromSize({\n        size: container.canvas.size,\n        position: particle.position\n      }), particle.options);\n    }\n  }\n\n  addParticle(position, overrideOptions, group) {\n    const container = this.container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this.pushParticle(position, overrideOptions, group);\n  }\n\n  addSplitParticle(parent, splitParticlesOptions) {\n    const splitOptions = parent.options.destroy.split,\n          options = loadParticlesOptions(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.container, parent.options),\n          factor = getValue(splitOptions.factor);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n          position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  destroy() {\n    this.array = [];\n    this.zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n\n  async draw(delta) {\n    const container = this.container,\n          canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    container.canvas.clear();\n    await this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  getLinkFrequency(p1, p2) {\n    const range = setRangeValue(p1.id, p2.id),\n          key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n    let res = this.freqs.links.get(key);\n\n    if (res === undefined) {\n      res = getRandom();\n      this.freqs.links.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.freqs.triangles.get(key);\n\n    if (res === undefined) {\n      res = getRandom();\n      this.freqs.triangles.set(key, res);\n    }\n\n    return res;\n  }\n\n  handleClickMode(mode) {\n    this.interactionManager.handleClickMode(mode);\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.freqs.links = new Map();\n    this.freqs.triangles = new Map();\n    let handled = false;\n    this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.interactionManager.init();\n\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  removeAt(index) {\n    let quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let group = arguments.length > 2 ? arguments[2] : undefined;\n    let override = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n\n      __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleRemoved\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n    }\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  async update(delta) {\n    var _a, _b;\n\n    const container = this.container,\n          particlesToDelete = [];\n\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n\n    for (const [, plugin] of container.plugins) {\n      (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n\n      particle.ignoresResizeRatio = false;\n      await this.interactionManager.reset(particle);\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        (_b = plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(plugin, particle, delta);\n      }\n\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    await this.interactionManager.externalInteract(delta);\n\n    for (const particle of container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        await this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number,\n          densityFactor = this.initDensityFactor(numberOptions.density),\n          optParticlesNumber = numberOptions.value,\n          optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n          particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n          particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element,\n          pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n\n      __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleAdded\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}\n_Particles_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particles_engine","calcPositionFromSize","getRandom","getRangeMax","getRangeMin","getValue","randomInRange","setRangeValue","InteractionManager","Particle","Point","QuadTree","Rectangle","loadParticlesOptions","Particles","constructor","engine","container","nextId","array","zArray","limit","needsSort","lastZIndex","freqs","links","Map","triangles","interactionManager","canvasSize","canvas","size","quadTree","width","height","movers","plugins","getMovers","updaters","getUpdaters","count","length","addManualParticles","options","actualOptions","particle","manualParticles","addParticle","position","overrideOptions","group","particles","number","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitParticlesOptions","splitOptions","destroy","split","factor","color","load","hsl","getFillColor","min","max","offset","sizeOffset","x","y","velocity","splitCount","unbreakable","setTimeout","clear","draw","delta","update","sort","a","b","z","id","plugin","drawPlugin","p","getLinkFrequency","p1","p2","range","key","res","undefined","getTriangleFrequency","p3","id1","id2","id3","handleClickMode","mode","init","_a","handled","particlesInitialization","pathGenerator","pathGenerators","groups","groupOptions","i","j","push","nb","mouse","pushing","redraw","remove","override","removeAt","indexOf","index","quantity","deleted","splice","zIdx","dispatchEvent","data","setDensity","applyDensity","_b","particlesToDelete","resizeFactor","ignoresResizeRatio","reset","destroyed","particleUpdate","mover","isEnabled","move","insert","getPosition","externalInteract","updater","spawning","particlesInteract","manualCount","density","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","Math","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","initializer","canAdd","e","console","warn","WeakMap"],"sources":["/home/brayanmezac/Descargas/drones-react/node_modules/tsparticles-engine/esm/Core/Particles.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particles_engine;\nimport { calcPositionFromSize, getRandom, getRangeMax, getRangeMin, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        _Particles_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particles_engine, engine, \"f\");\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n        this.interactionManager = new InteractionManager(__classPrivateFieldGet(this, _Particles_engine, \"f\"), container);\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.movers = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getMovers(container, true);\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(calcPositionFromSize({\n                size: container.canvas.size,\n                position: particle.position,\n            }), particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this.pushParticle(position, overrideOptions, group);\n    }\n    addSplitParticle(parent, splitParticlesOptions) {\n        const splitOptions = parent.options.destroy.split, options = loadParticlesOptions(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.container, parent.options), factor = getValue(splitOptions.factor);\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitParticlesOptions);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.pushParticle(position, options, parent.group, (particle) => {\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = parent.splitCount + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    destroy() {\n        this.array = [];\n        this.zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    getLinkFrequency(p1, p2) {\n        const range = setRangeValue(p1.id, p2.id), key = `${getRangeMin(range)}_${getRangeMax(range)}`;\n        let res = this.freqs.links.get(key);\n        if (res === undefined) {\n            res = getRandom();\n            this.freqs.links.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.freqs.triangles.get(key);\n        if (res === undefined) {\n            res = getRandom();\n            this.freqs.triangles.set(key, res);\n        }\n        return res;\n    }\n    handleClickMode(mode) {\n        this.interactionManager.handleClickMode(mode);\n    }\n    init() {\n        var _a;\n        const container = this.container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        this.freqs.links = new Map();\n        this.freqs.triangles = new Map();\n        let handled = false;\n        this.updaters = __classPrivateFieldGet(this, _Particles_engine, \"f\").plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (!(index >= 0 && index <= this.count)) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            deleted++;\n            __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleRemoved\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this.applyDensity(options.particles.groups[group], 0, group);\n        }\n        this.applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        var _a, _b;\n        const container = this.container, particlesToDelete = [];\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this.interactionManager.reset(particle);\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                (_b = plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(plugin, particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of container.particles.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number, densityFactor = this.initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            const particle = new Particle(__classPrivateFieldGet(this, _Particles_engine, \"f\"), this.nextId, this.container, position, overrideOptions, group);\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            __classPrivateFieldGet(this, _Particles_engine, \"f\").dispatchEvent(\"particleAdded\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n_Particles_engine = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}